# vi: syntax=ruby
# vi: filetype=ruby

# Variables
$terranet_base_version = File.read('BASEVM_VERSION').strip
$terranet_version = File.read('VERSION').strip
$vm_cpus = ENV['VM_CPUS'] || 1
$vm_memory = ENV['VM_MEMORY'] || 512

# terranet-base provisioning script
$base_provisioning = <<~SCRIPT
  pushd /usr/local/src
  touch /etc/rc.local

  ## Install (ip)mininet VM
  curl -sSL https://raw.githubusercontent.com/cnp3/ipmininet/master/ipmininet/install/build_vm.sh \
    | IPMN_REPO='https://github.com/butjar/ipmininet.git' IPMN_BRANCH='OpenR-seperate-logs-and-config-store' bash
  rm -rf /etc/rc.local
  dpkg-reconfigure -fnoninteractive openssh-server

  ## Install Komondor
  git clone https://github.com/Bustel/Komondor.git
  mkdir -p Komondor/Code/build
  pushd Komondor/Code/build
  cmake ..
  make
  make install
  popd

  ## Install and start grafana
  apt-get install -y apt-transport-https software-properties-common wget
  wget -q -O - https://packages.grafana.com/gpg.key | apt-key add -
  add-apt-repository 'deb https://packages.grafana.com/oss/deb stable main'

  apt-get update && apt-get install grafana

  systemctl daemon-reload
  systemctl enable grafana-server --now

  ## Install and start influxdb
  wget -qO- https://repos.influxdata.com/influxdb.key | apt-key add -
  source /etc/lsb-release
  echo "deb https://repos.influxdata.com/${DISTRIB_ID,,} ${DISTRIB_CODENAME} stable" | tee /etc/apt/sources.list.d/influxdb.list

  apt-get update && apt-get install influxdb

  systemctl unmask influxdb.service
  systemctl enable influxdb --now
  popd

  ## Install collectd
  apt-get update && apt-get install -y collectd
  mkdir -p /usr/share/collectd/

  curl -sLo /usr/share/collectd/types.db https://raw.githubusercontent.com/collectd/collectd/master/src/types.db

  systemctl unmask collectd.service
  systemctl enable collectd --now
SCRIPT

# terranet provisioning script
$provisioning = <<~SCRIPT
  influx -execute 'CREATE DATABASE customerstats'
  influx -execute 'CREATE DATABASE switchstats'

  cp -rf /tmp/etc/* /etc
  cp -rf /tmp/var/* /var

  systemctl restart collectd.service
  systemctl restart influxdb.service
  systemctl restart influxd.service
  systemctl restart grafana-server.service

  pip3 install 'terranet==#{$terranet_version}'
SCRIPT

Vagrant.configure('2') do |config|
  config.vm.provider 'virtualbox' do |v|
        v.cpus = $vm_cpus
        v.memory = $vm_memory
  end

  config.vm.define 'terranet-base-build', autostart: false do |t|
    t.vm.box = 'ubuntu/bionic64'
    t.vm.provider 'virtualbox' do |v|
        unless File.exist?('.vagrant/machines/terranet-base-build/virtualbox/action_provision')
            $vm_cpus < 2 ? v.cpus = 2 : v.cpus = $vm_cpus
            $vm_memory < 5120 ? v.memory = 5120 : v.memory = $vm_memory
        end
    end
    t.vm.synced_folder '.', '/vagrant', disabled: true
    t.vagrant.plugins = ['vagrant-disksize']
    t.disksize.size = '15GB'
    t.vm.provision 'shell', inline: $base_provisioning
    t.ssh.insert_key = false
  end

  config.vm.define 'terranet-build', primary: true do |t|
    t.vm.box = 'butja/terranet-base'
    t.vm.box_version = $terranet_base_version
    t.vm.synced_folder '.', '/vagrant', disabled: true
    t.vm.provision 'file', source: 'etc',
                           destination: '/tmp/etc'
    t.vm.provision 'file', source: 'var',
                           destination: '/tmp/var'
    t.vm.provision 'shell', inline: $provisioning
    t.ssh.insert_key = false
  end
end
