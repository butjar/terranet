#!/usr/bin/env python2
import argparse
import logging
import logging.handlers
import os

from terranet.tools import simulate, generate, run

def init_logging():

    root = logging.getLogger()
    root.setLevel(logging.DEBUG)

    format = logging.Formatter()

    s = logging.StreamHandler()
    s.setLevel(logging.INFO)
    s.setFormatter(format)

    log_path = '/tmp/terranet_{}.log'.format(os.geteuid())  # Avoiding trouble with root-owned logs
    f = logging.handlers.RotatingFileHandler(log_path, maxBytes=1024**2, backupCount=1)
    f.setLevel(logging.DEBUG)
    f.setFormatter(format)

    root.addHandler(s)
    root.addHandler(f)

if __name__ == '__main__':
    init_logging()
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    gen_parser = subparsers.add_parser('generate',
                                       help='Generate a permutation of possible Komondor configurations based on simple topology.')
    gen_parser.set_defaults(func=generate)

    gen_parser.add_argument('topology', type=str, help='JSON file containing the basic network topology.')
    gen_parser.add_argument('--cfg_dir', default='cfg', type=str,
                            help='Output directory for generated configurations. Defaults to "cfg".')

    simulate_parser = subparsers.add_parser('simulate', help='start Komondor simulator with generated configurations')
    simulate_parser.set_defaults(func=simulate)
    simulate_parser.add_argument('--cfg_dir',
                                 nargs='?',
                                 default="cfg",
                                 type=str,
                                 help='Input directory of generated configurations. Defaults to "cfg".')
    simulate_parser.add_argument('--out_dir',
                                 nargs='?',
                                 default="out",
                                 type=str,
                                 help='Output directory for simulation results. Defaults to "out".')
    simulate_parser.add_argument('--time',
                                 nargs='?',
                                 default=100,
                                 type=int,
                                 help="Simulation duration in seconds. Defaults to 100 seconds.")
    simulate_parser.add_argument('--seed',
                                 nargs='?',
                                 default=1000,
                                 type=int,
                                 help='')
    simulate_parser.add_argument('--processes',
                                 nargs='?',
                                 default=None,
                                 type=int,
                                 help='Number of parallel running simulations. Defaults to os.cpu_count().')
    simulate_parser.add_argument('--komondor',
                                 nargs='?',
                                 type=str,
                                 default='komondor',
                                 help='Path to Komondor executable. Defaults to "komondor".')

    run_parser = subparsers.add_parser('run', help='Run emulated Terranet in Mininet.')
    run_parser.set_defaults(func=run)
    run_parser.add_argument('network', help='Path to JSON file describing the network')
    run_parser.add_argument('cfg_path', help='Path to configuration files for komondor simulation')
    run_parser.add_argument('out_path', help='Path to the simulation results')
    run_parser.add_argument('-t', '--topo-port',
                            help='Set port of web server serving the topology image. Defaults to 6666.',
                            type=int,
                            default=6666)
    run_parser.add_argument('-m', '--metering-port',
                            help='Set port for publishing flow metering info. Defaults to 5556.',
                            type=int,
                            default=5556)
    run_parser.add_argument('-c', '--config-port',
                            help='Set port for publishing configuration changes. Defaults to 4568.',
                            type=int,
                            default=4568)

    args = parser.parse_args()
    args.func(args)
