#!/usr/bin/env python
from mininet.cli import CLI
from mininet.log import lg, info
from mininet.link import TCLink
from mininet.node import OVSSwitch

from ipmininet.ipnet import IPNet
from ipmininet.iptopo import IPTopo
from ipmininet.cli import IPCLI
from ipmininet.router.config import RouterConfig, OpenrDaemon, Openr


class OpenrConfig(RouterConfig):
    """A simple config with only a OpenR daemon"""
    def __init__(self, node, *args, **kwargs):
        defaults = {}
        super(OpenrConfig, self).__init__(node,
                                          daemons=((Openr, defaults),),
                                          *args, **kwargs)

class SimpleOpenrNet(IPTopo):
    def build(self, *args, **kwargs):

        # DNs
        {%- import 'dn.j2' as dn_tmpl %}
        {%- for dn in config.get_access_points() %}
        {{ dn_tmpl.input(dn.name, 's{}'.format(loop.index))|indent(8) }}
        {% endfor %}

        # CNs
        {%- import 'cn.j2' as cn_tmpl %}
        {%- for cn in config.get_stations() %}
        {{ cn_tmpl.input(cn.name) }}
        {%- endfor %}

        # Links
        {%- import 'link.j2' as link_tmpl %}
        {%- for (node1, node2) in config.get_links() %}
        {{ link_tmpl.input(node1, node2) }}
        {%- endfor %}

        super(SimpleOpenrNet, self).build(*args, **kwargs)

    def addRouter_openr(self, name):
        return self.addRouter(name, config=OpenrConfig,
                              privateDirs=['/tmp', '/var/log'])

if __name__ == '__main__':
    net = SimpleOpenrNet()
    net = IPNet(topo=SimpleOpenrNet(),
                link=TCLink,
                switch=OVSSwitch)
    net.start()
    IPCLI(net)
    net.stop()
